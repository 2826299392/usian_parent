2020-06-01:
    在ContentServiceImp类中，实现了大广告的缓存，在增加，删除的时候实现了，redis缓存的同步。
2020-06-02：
    一、ElasticSearch介绍
       1、什么是elasticsearch?
    	elasticsearch是基于lucene的全文检索服务器，对外提供restful接口

       2、elasticsearch原理
    	 正排索引：查字典时从第一页开始找，直到找到关键字为止（CTRL+F）
    	 倒排索引：查字典时通过目录查找

    	 逻辑结构：一个倒排索引表，由三部分组成
    		document
    		term
    		term----关联----document

    二、ES安装
    	a、安装
    		1、设置虚拟机内存>1.5G
    		2、创建用户
    		3、安装
    			解压即安装
    			配置elasticsearch.yml
    		4、解决内核问题
    		5、解决文件创建权限问题
    		6、决绝线程开启限制问题
    		7、解决虚拟机内存问题

    	b、启动和关闭
    		启动：
    			./bin/elasticsearch
    			./elasticsearch -d

    		关闭：
    			kill -9 pid

    三、ES快速入门
     1、index管理
    	a、创建index
    		PUT /java1906
    		{
    		   "settings"{
    			"number_of_shards":2,
    			"number_of_replicas":0 #备份分配不允许和主分片在同一个节点上
    		   }
    		}

    	b、修改index
    		PUT /java1906/_settings
    		{
    		  "number_of_replicas":1 #主分片不能修改【hash(doc_id)%number_of_shards=shard】
    		}

    	c、删除index
    		DELETE /java1906

     2、mapping管理
    	a、关键mapping
    		POST /java1906/course/_mapping
    		{
    			"properties":{
    				"name":{
    					"type":"text"
    				}
    			}
    		}

    	b、查询mapping
    		GET /java1906/couse/_mapping

      3、doucument管理
    	a、创建doucment
    		POST /java1907/couse/1
    		{
    			"name":"php从入门到放弃"
    		}
    		POST /java1907/couse
    		{
    			"name":"php从入门到放弃"
    		}
    		PUT /java1907/couse/1
    		{
    			"name":"php从入门到放弃"
    		}
    	b、查询doucument
    		GET /java1906/couse/1

    	c、删除document
    		DELETE /java1906/couse/1

    四、IK分词器
       1、安装
    	解压到plugs目录下，并重命名为ik

        2、自定义词库
    	IkAnalyzer.cfg.xml：配置扩展词典和停用词典
    	main.dic：扩展词典
    	stopwords.dic：停用词典

        3、两种分词模式
    	ik_smart：粗粒度拆分
    	ik_max_word：细粒度拆分
2020-06-03：
         1、文档的管理
             1.1、添加文档
             1.2、批量添加
             1.3、修改文本
             1.4、删除文本
         2、文档搜索
             2.1、match_all查询  全部查询
             2.2、分页查询
             2.3、match查询  单条件查询
             2.4、multi_match查询   根据一个分词  查询多个字段
             2.5、boot查询   多条件查询
             2.6、filter查询  不需要计算相关度分数
             2.7、highlight查询  高光
2020-06-04：
         1、highlight查询  高光
         2、Elasticsearch集群搭建
         3、Elasticsearch整合项目，将商品信息导入索引库中，
2020-06-05：
         1、搜索商品，以关键字搜索商品信息
         2、添加商品的时候将数据同步到索引库中
2020-06-08:
         1、创建usian_detail_web工程
         2、//搜索到商品，点击商品根据ID查看商品信息
               @RequestMapping("/selectItemInfo")
               public Result selectItemInfo(@RequestParam Long itemId)；
         3、//根据Id查询商品详情数据信息
               @RequestMapping("/selectItemDescByItemId")
               public Result selectItemDescByItemId(@RequestParam Long itemId)
         4、 //商品详情信息的规格参数信息
               @RequestMapping("selectTbItemParamItemByItemId")
               public Result selectTbItemParamItemByItemId(@RequestParam Long itemId)
         5、解决缓存穿透的问题
         6、解决缓存穿击的问题
2020-06-09：
         1、 //注册校验用户是否已经存在
               @RequestMapping("/checkUserInfo/{checkValue}/{checkFlag}")
               public Result checkUserInfo(@PathVariable String checkValue,@PathVariable Integer checkFlag)
         2、 //注册用户信息
               @RequestMapping("/userRegister")
               public Result userRegister(TbUser tbUser)
         3、//用户登录
               @RequestMapping("/userLogin")
               public Result userLogin(@RequestParam String username,@RequestParam String password)
         4、//通过登录的时候存到cookie域的token中的数据查询用户信息，在页面展示欢迎XX登录
               @RequestMapping("/getUserByToken/{token}")
               public Result getUserByToken(@PathVariable String token)
         5、 //退出登录清空用户信息
               @RequestMapping("/logOut")
               public Result logOut(@RequestParam String token)
2020-06-10:
         1、购物车信息，未登录，已登录
         2、未登录//添加商品到购物车
                  @RequestMapping("/addItem")
                  public Result addItem(Long itemId,
                                        String userId,
                                        @RequestParam(defaultValue = "1")Integer num,
                                        HttpServletRequest request,
                                        HttpServletResponse response)
         3、 //查看购物车信息
               @RequestMapping("/showCart")
               public Result showCart(String userId,
                                      HttpServletRequest request,
                                      HttpServletResponse response)
         4、//修改cookie里的购物车中的数据的数量，增加数量
               @RequestMapping("/updateItemNum")
               public Result updateItemNum(Integer num,Long itemId,String userId,
                                           HttpServletRequest request,
                                           HttpServletResponse response)
         5、//删除购物车中商品信息
               @RequestMapping("/deleteItemFromCart")
               public Result deleteItemFromCart(Long itemId,String userId,
                                                HttpServletRequest request,
                                                HttpServletResponse response)
2020-06-16:
         1、商品结算的时候进行拦截
         2、查看订单页面商品详情
            @RequestMapping("/goSettlement")
               public Result goSettlement(String userId,String[] ids)
2020-06-17:
         1、提交订单
            //提交订单商品的信息，将提交的订单商品信息保存到数据库
                @RequestMapping("/insertOrder")
                public Result insertOrder(String orderItem, TbOrderShipping tbOrderShipping, TbOrder tbOrder)
         2、扣减库存
              //通过MQ发送消息在提交订单购买成功后，扣除item中商品的库存数量
                      amqpTemplate.convertAndSend("order_exchange","order.deleteNum",orderId);
              //根据商品订单号修改商品库存数量
                  @Override
                  public Integer updateTbItemByOrderId(String orderId)
2020-06-18:
         1、  @Bean
               public JobDetailFactoryBean getJobDetailFactoryBean(){
               @Bean
                   public CronTriggerFactoryBean getCronTriggerFactoryBean(JobDetailFactoryBean jobDetailFactoryBean){
              @Bean
                  public SchedulerFactoryBean getSchedulerFactoryBean(CronTriggerFactoryBean cronTriggerFactoryBean,MyAdaptabl
               if(redisClient.setnx("SETNX_ORDER_LOCK_KEY",ip,30)){
2020-06-19：
         1、一、代理模式
            1、作用：控制访问某个对象的方法，调用方法前可以做前置处理，调用方法后可以做后置处理（AOP的微观实现）
            2、角色：
           		抽象角色（接口）：定义公共对外方法
           		真实角色（周杰伦）：业务逻辑
           		代理角色（代理人）：调用真实角色完成业务逻辑，并可附加自己的操作

           3、静态代理缺陷：
           	     大量代码重复
           	     只能代理一种类型的对象
           4、动态代理
           	a、jdk自带的动态代理
           	     java.lang.reflect.InvocationHandler：通过invoke调用真实角色
           	     java.lang.reflect.Proxy：动态生成代理类的对象

           		好处：
           		     大量代码重复
           		     能代理任意类型的对象

           	b、Cglib的动态代理
           		和jdk代理的区别：没有接口
           		原理：生成代理类的子类，在子类中调用父类并可附加自己的操作
          5、 //记录本地消息表    将订单订单号，和订单的状态记录到本地
          6、 public void sendMsg(LocalMessage localMessage) {
                    RabbitTemplate rabbitTemplate = (RabbitTemplate) this.amqpTemplate;//将amqpTemplate接口转换为rabbitListener子类调用方法

          7、 //作用：下游服务：  消息确认成功返回后调用
                @Override
                public void confirm(CorrelationData correlationData, boolean ack, String s) {

2020-06-22：
          1： System.out.println("执行扫描本地消息表的任务...." + new Date());
                        List<LocalMessage> localMessages = localMessageService.selectLocalMessageByStatus(0);  //查询状态为0的消息发送失败的消息
          2、  LocalMessage localMessage = JsonUtils.jsonToPojo(orderId, LocalMessage.class);  //将发送过来的消息进行转换
                    DeDuplication deDuplications = deDuplicationService.selectDeDuplicationByTxNo(localMessage.getTxNo());  //查询去重表中这个消息
                    if(deDuplications==null){   //如果这个消息为空说明消费成功
                        Integer result = itemService.updateTbItemByOrderId(localMessage.getOrderNo());  //根据商品订单号修改商品库存数量
          3、ELK介绍   三者结合
               - Elasticsearch：是开源的分布式全文检索服务器。
               - Logstash：是一个具有实时传输能力的数据收集引擎，用来进行数据收集（如：读取文本文件）、解析，并将数据发送给ES。
               - Kibana：数据分析与可视化平台，对Elasticsearch存储的数据进行可视化分析，通过表格的形式展现出来
2020-06-24
    MySql主从复制
    下载地址：https://dev.mysql.com/downloads/mysql/
    1、卸载预装mysql
        #查看已安装：
        [root@centos upload]# rpm -qa|grep mysql
        #卸载：
        [root@centos upload]# rpm -e --nodeps mysql-libs-5.1.71-1.el6.x86_64
        #再次查看：
        [root@centos upload]# rpm -qa|grep mysql
    2、解压安装包
        [root@centos upload]# tar -zxvf mysql-5.6.31-linux-glibc2.5-x86_64.tar.gz -C /usr/java
        [root@centos upload]# cd /usr/java
        [root@centos java]# mv mysql-5.6.31-linux-glibc2.5-x86_64 mysql
    3、复制mysql的配置文件
        [root@centos java]# cd mysql
        [root@centos java]# cp support-files/my-default.cnf /etc/my.cnf
        [root@centos java]# cp support-files/mysql.server /etc/rc.d/init.d/mysql
    4、修改my.cnf
        vim /etc/my.cnf

        basedir = /usr/java/mysql
        datadir = /usr/java/mysql/data
        log-error = /usr/java/mysql/data/error.log
        pid-file = /usr/java/mysql/data/mysql.pid
        user = root
        tmpdir = /tmp
    5、初始化数据库
         [root@centos java]# cd /usr/java/mysql
         [root@centos mysql]# ./scripts/mysql_install_db --user=root
         --basedir=/usr/java/mysql --datadir=/usr/java/mysql/data
         --pid-file=/usr/java/mysql/data/mysql.pid --tmpdir=/tmp
    6、启动和关闭mysql
        [root@centos mysql]# service mysql start
        Starting MySQL..                                          [确定]
        [root@centos mysql]# service mysql stop
        Shutting down MySQL..                                     [确定]
        [root@centos mysql]# service mysql restart
        Shutting down MySQL..
        Starting MySQL..                                          [确定]
    7、配置mysql命令支持
        如果提示没有mysql命令，需要添加软连接
        [root@centos mysql]# ln -s /usr/java/mysql/bin/mysql /usr/bin/mysql
    8、修改MySQL密码
        [root@centos upload]# mysql -u root
        mysql> use mysql;
        mysql> update user set password= password("1111") where user='root';
        mysql> flush privileges;
    9、开放远程登录权限
        mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '1111' WITH GRANT OPTION;
        mysql>FLUSH PRIVILEGES;
    10、设置开机启动
        [root@centos mysql]# chkconfig mysql on
    MySQL主从复制
    1、mysql主从简介
        1. MySQL 默认支持主(master)从(slave)功能.
        2. 主从复制效果：在主数据库中操作时,从同步进行变化.
        3. 主从复制本质：主数据的操作写入到日志中,从数据库从日志中读取,进行操作.
    2、主从备份要素：
        1. 开启日志功能
        2. 每个数据库需要有一个 server_id,主 server_id 值小于从server_id(标识从哪server写入的)
        3. 每个 mysql 都有一个 uuid,由于虚拟机直接进行克隆,需要修改uuid 的值(唯一识别码)
        4. 必须要在主数据库中有一个用户具有被从数据库操作的权限.
    3、克隆mysql1的虚拟机
        作为从数据库
    4、配置主数据库
        修改主数据库的my.cnf文件
        log_bin=master_log
        server_id=1
        重启mysql
        [root@centos upload]# service mysql restart

    5、配置从数据库
        1、修改server_id
            server_id=2
        2、data文件夹auto.cnf编写当前mysql的uuid
            server-uuid=b144a074-6ebe-11e9-b501-000c293cc59c
        3、重启mysql
            [root@centos upload]# service mysql restart
        4、修改slave
            mysql> stop slave;
            mysql> change master to master_host='192.168.233.137',master_user='root',master_password='1111',master_log_file='master_log.000001';
            mysql> start slave;
        5、查看slave状态
            mysql>show slave status \G;
                io线程和sql线程已开启：
                Slave_IO_Running:Yes
                Slave_SQL_Running:Yes
                Last_IO_Errno:0
                Last_IO_Error:
                Last_SQL_Errno:0
                Last_SQL_Error:
                只要没有错误,说明配置成功主从关系：
        6、验证主从关系
              在主数据库中新建数据库,新建表,添加数据,观察从数据库的
        7、MyCat
            1、MyCat简介
                MyCAT是一个数据库中间件。国产开源项目，前身是cobar项目。
            2、Mycat对多数据库的支持
                MySql Oracle SQLServer
            3、MyCAT架构
                MyCAT使用Mysql的通讯协议模拟成了一个Mysql服务器，所有能使用Mysql的客户端以及编程语言都能将MyCAT当成是Mysql Server来使用，
                不必开发新的客户端协议。
            4、MyCat分库分表
                垂直分割（分库）：指按照业务将表进行分类，分布到不同的数据库上面，这样也就将数据或者说压力分担到不同的库上面
                水平分割（分表）：一个表格的数据按照行分割到多个节点上
                典型的分片规则：
                	根据主键编号进行hash、求余  几个MySQL求余几
            5、MyCat安装
                2.5.1、下载mycat
                2.5.2、安装Mycat
                    1、把MyCat的压缩包上传到linux服务器
                    2、解压缩，得到mycat目录
                        [root@centos upload]# tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz -C /usr/java
                    3、启动和关闭MyCat
                        进入mycat/bin，启动MyCat
                        启动命令：./mycat start
                        停止命令：./mycat stop
                        重启命令：./mycat restart
                        查看状态：./mycat status
                        注意：可以使用mysql的客户端直接连接mycat服务。默认服务端口为8066
        8、Mycat分库分表和读写分离
            1、需求
                把商品表分片存储到两个数据节点上
            2、安装环境
            4、MyCat重要概念
                1、逻辑库（schema）：一个包含了所有数据库的逻辑上的数据库
                2、逻辑表（table）：一个包含了所有表的逻辑上的表
                3、数据主机（dataHost）：数据库软件安装到哪个服务器上  节点
                4、数据节点（dataNode）：数据库软件中的 database  数据库中的MySQL
                5、分片规则（rule）：拆分规则
            5. 配置schema.xml
                3.5.1、Schema.xml介绍
                    Schema.xml作为MyCat中重要的配置文件之一，管理着MyCat的逻辑库、表、分片规则、DataNode以及DataSource。
                3.5.2、Schema.xml配置
            6、配置server.xml
                3.6.1、server.xml介绍
                    server.xml几乎保存了所有mycat需要的系统配置信息。最常用的是在此配置用户名、密码及权限。
                3.6.2、server.xml配置
            7、配置rule.xml
                3.7.1.分片规则
                    3.7.1.1.auto-sharding-long 规则
                    3.7.1.2.crc32slot  规则   (采用这种)
                3.7.2、rule.xml配置
            8、测试
                1、创建库
                    在主数据库中分别创建db1、db2、db3
                2、创建表并插入数据
                    配置完毕后，重新启动mycat。
                    使用mysql客户端连接mycat，创建表并插入数据。
                3、分库测试
                4、项目测试
                    1、修改数据库url
                    2、测试
2020-06-28:
            1、网关服务
               1.路由：所有请求都通过网关访问服务的consumer
               2.容错：客户端通过zuul无法调用consumer时，使用zuul对consumer进行降级
               3.限流：使用令牌桶算法实现zuul对consumer的限流










